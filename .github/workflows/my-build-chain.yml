name: my-build-chain
run-name: ${{ github.actor }} is making a build chain
on: [push]
jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0  
      - name: Write version artifact
        run: echo "${{steps.gitversion.outputs}}" > version.txt
      - uses: actions/upload-artifact@v4
        with:
          name: ${{steps.gitversion.outputs.fullSemVer}}
          path: version.txt
      - name: Display GitVersion outputs (step output)
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

  build-code:
    needs: [versioning]
    runs-on: ubuntu-latest
    steps:
      - name: Sleep for random seconds
        run: echo "Building...."
      - run: sleep $(( RANDOM % 20 ))

  code-analysis:
    needs: [versioning]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Running code analysis...."
      - run: sleep $(( RANDOM % 20 ))

  run-some-tests:
    needs: [build-code]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Running some tests...."
      - run: sleep $(( RANDOM % 20 ))

  publish-packages:
    runs-on: ubuntu-latest
    needs: [run-some-tests, code-analysis]
    steps:
      - run: echo "Publishing packages...."
      - run: sleep $(( RANDOM % 20 ))      

  create-release:
    runs-on: ubuntu-latest
    needs: [run-some-tests, code-analysis]
    steps:
      - run: echo "This is a sample text file" > sample.txt
      - uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: sample.txt
      - run: sleep $(( RANDOM % 20 ))      
      
  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: [create-release, publish-packages]
    steps:
      - run: sleep $(( RANDOM % 20 ))      

  run-regression-tests-dev:
    runs-on: ubuntu-latest
    needs: [deploy-to-dev]
    steps:
      - run: sleep $(( RANDOM % 20 ))  

  deploy-to-qa:
    runs-on: ubuntu-latest
    needs: [run-regression-tests-dev]
    steps:
      - run: sleep $(( RANDOM % 20 ))   

  run-regression-tests-qa:
    runs-on: ubuntu-latest
    needs: [deploy-to-qa]
    steps:
      - run: sleep $(( RANDOM % 20 ))  

  deploy-to-sbox:
    runs-on: ubuntu-latest
    needs: [run-regression-tests-qa]
    steps:
      - run: sleep $(( RANDOM % 20 ))      

  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: [deploy-to-sbox]
    steps:
      - run: sleep $(( RANDOM % 20 ))   